{"version":3,"sources":["super-res.js","src/super-res.js"],"names":[],"mappings":"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","file":"super-res.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('superagent'), require('route-parser'), require('q')) :\n  typeof define === 'function' && define.amd ? define(['superagent', 'route-parser', 'q'], factory) :\n  global.superRes = factory(global.request, global.Route, global.Q)\n}(this, function (request, Route, Q) { 'use strict';\n\n  let super_res__superRes = {};\n\n  const actionDefaults = {\n    method: 'GET',\n    responseType: 'json'\n  };\n\n  function buildRequest(action, route, params, data) {\n    let currentRequest = request;\n\n    let method = action.method.toLowerCase();\n    currentRequest = request[method === 'delete' ? 'del' : method](route.reverse(params));\n\n    currentRequest = currentRequest.accept(action.responseType);\n\n    if (data && method === 'get') {\n      currentRequest = currentRequest.query(data);\n    } else if (data) {\n      currentRequest = currentRequest.send(data);\n    }\n\n    return currentRequest;\n  }\n\n  function buildAction(url, action) {\n    const fullAction = Object.assign({url: url}, actionDefaults, action);\n    const route = new Route(fullAction.url);\n    return function (params, data) {\n      let deferred = Q.defer();\n      let timeoutId;\n      if (action.timeout) {\n        timeoutId = setTimeout(() => {\n          deferred.reject({reason: 'Timeout reached'});\n        }, action.timeout);\n      }\n      buildRequest(fullAction, route, params, data)\n        .end((err, res) => {\n          clearTimeout(timeoutId);\n          if (err) {\n            deferred.reject(err);\n          } else {\n            deferred.resolve(res.body);\n          }\n        });\n      return deferred.promise;\n    };\n  }\n\n  function buildDefaultActions(url) {\n    let resource = {};\n    resource.get = buildAction(url, Object.assign({}, actionDefaults));\n    resource.query = resource.get;\n    resource.save = buildAction(url, Object.assign({}, actionDefaults, {method: 'POST'}));\n    resource.put = buildAction(url, Object.assign({}, actionDefaults, {method: 'PUT'}));\n    resource.remove = buildAction(url, Object.assign({}, actionDefaults, {method: 'DELETE'}));\n    resource['delete'] = resource.remove;\n    return resource;\n  }\n\n  super_res__superRes.resource = (url, defaultParams, actions) => {\n    let resource = buildDefaultActions(url);\n    if (actions) {\n      Object.getOwnPropertyNames(actions).forEach((name) => {\n        resource[name] = buildAction(url, actions[name]);\n      });\n    }\n    return resource;\n  };\n\n  super_res__superRes.proxyQ = (qInstance) => {\n    return (resource) => {\n      let proxiedResource = Object.assign({}, resource);\n      Object.getOwnPropertyNames(resource).forEach((name) => {\n        let actionFunction = proxiedResource[name];\n        proxiedResource[name] = function (...args) {\n          let promise = actionFunction.apply(proxiedResource, args);\n          return qInstance.when(promise);\n        }\n      });\n      return proxiedResource;\n    }\n  };\n\n  var super_res = super_res__superRes;\n\n  return super_res;\n\n}));\n","import request from 'superagent';\nimport Route from 'route-parser';\nimport Q from 'q';\n\nlet superRes = {};\n\nconst actionDefaults = {\n  method: 'GET',\n  responseType: 'json'\n};\n\nfunction buildRequest(action, route, params, data) {\n  let currentRequest = request;\n\n  let method = action.method.toLowerCase();\n  currentRequest = request[method === 'delete' ? 'del' : method](route.reverse(params));\n\n  currentRequest = currentRequest.accept(action.responseType);\n\n  if (data && method === 'get') {\n    currentRequest = currentRequest.query(data);\n  } else if (data) {\n    currentRequest = currentRequest.send(data);\n  }\n\n  return currentRequest;\n}\n\nfunction buildAction(url, action) {\n  const fullAction = Object.assign({url: url}, actionDefaults, action);\n  const route = new Route(fullAction.url);\n  return function (params, data) {\n    let deferred = Q.defer();\n    let timeoutId;\n    if (action.timeout) {\n      timeoutId = setTimeout(() => {\n        deferred.reject({reason: 'Timeout reached'});\n      }, action.timeout);\n    }\n    buildRequest(fullAction, route, params, data)\n      .end((err, res) => {\n        clearTimeout(timeoutId);\n        if (err) {\n          deferred.reject(err);\n        } else {\n          deferred.resolve(res.body);\n        }\n      });\n    return deferred.promise;\n  };\n}\n\nfunction buildDefaultActions(url) {\n  let resource = {};\n  resource.get = buildAction(url, Object.assign({}, actionDefaults));\n  resource.query = resource.get;\n  resource.save = buildAction(url, Object.assign({}, actionDefaults, {method: 'POST'}));\n  resource.put = buildAction(url, Object.assign({}, actionDefaults, {method: 'PUT'}));\n  resource.remove = buildAction(url, Object.assign({}, actionDefaults, {method: 'DELETE'}));\n  resource['delete'] = resource.remove;\n  return resource;\n}\n\nsuperRes.resource = (url, defaultParams, actions) => {\n  let resource = buildDefaultActions(url);\n  if (actions) {\n    Object.getOwnPropertyNames(actions).forEach((name) => {\n      resource[name] = buildAction(url, actions[name]);\n    });\n  }\n  return resource;\n};\n\nsuperRes.proxyQ = (qInstance) => {\n  return (resource) => {\n    let proxiedResource = Object.assign({}, resource);\n    Object.getOwnPropertyNames(resource).forEach((name) => {\n      let actionFunction = proxiedResource[name];\n      proxiedResource[name] = function (...args) {\n        let promise = actionFunction.apply(proxiedResource, args);\n        return qInstance.when(promise);\n      }\n    });\n    return proxiedResource;\n  }\n};\n\nexport default superRes;\n"],"sourceRoot":"/source/"}