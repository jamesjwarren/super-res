{"version":3,"sources":["super-res.min.js","/source/super-res.js","/source/src/ResourceAction.js","/source/src/super-res.js","/source/src/actionDefaults.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","require","define","amd","superRes","Q","superagent","Route","cacheManager","this","applyResponseTransforms","transforms","response","reduce","memo","transform","header","body","applyRequestTransforms","request","data","generateDefaultActions","url","defaultParams","resource","action","ResourceAction","super_res__assign","actionDefaults","get","makeRequest","bind","query","method","save","put","remove","responseType","transformRequest","transformResponse","withCredentials","cache","ResourceAction_js__assign","cacheDefault","store","max","ttl","_this","config","toUpperCase","canHaveData","route","derivedParams","getOwnPropertyNames","forEach","paramName","param","startsWith","slice","caching","value","params","reverse","JSON","stringify","toLowerCase","currentRequest","accept","headers","set","timeout","clearTimeout","transformedData","send","_this2","deferred","defer","arguments","undefined","computedParams","prop","fullParams","doRequest","buildRequest","end","err","res","reject","transformedReponse","getCacheKey","resolve","result","promise","super_res__superRes","actions","name","apply","promiseWrapper","wrapperFunc","proxiedResource","actionFunction","_len","args","Array","_key","super_res"],"mappings":"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","file":"super-res.min.js","sourcesContent":[null,"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('q'), require('superagent'), require('route-parser'), require('cache-manager')) :\n  typeof define === 'function' && define.amd ? define(['q', 'superagent', 'route-parser', 'cache-manager'], factory) :\n  global.superRes = factory(global.Q, global.superagent, global.Route, global.cacheManager)\n}(this, function (Q, superagent, Route, cacheManager) { 'use strict';\n\n  var actionDefaults = actionDefaults = {\n    method: 'GET',\n    responseType: 'json',\n    transformRequest: [],\n    transformResponse: [],\n    withCredentials: false,\n    cache: null\n  };\n\n  var ResourceAction_js__assign = ResourceAction_js__assign || require('object.assign');\n\n  const cacheDefault = {store: 'memory', max: 100, ttl: 1200};\n\n  function applyResponseTransforms(transforms, response) {\n    return transforms.reduce(function (memo, transform) {\n      return transform(memo, response.header);\n    }, response.body);\n  }\n\n  function applyRequestTransforms(transforms, request, data) {\n    return transforms.reduce(function (memo, transform) {\n      return transform(memo, request.header);\n    }, data);\n  }\n\n  class ResourceAction {\n    constructor(url, defaultParams, action) {\n      this.config = ResourceAction_js__assign({url: url}, actionDefaults, action);\n\n      if((this.config.method.toUpperCase() === 'POST' ||\n        this.config.method.toUpperCase() === 'PUT' ||\n        this.config.method.toUpperCase() === 'PATCH')) {\n        this.canHaveData = true;\n      }\n\n      this.route = new Route(this.config.url);\n      this.defaultParams = {};\n      this.derivedParams = {};\n\n      Object.getOwnPropertyNames(defaultParams)\n        .forEach((paramName) => {\n          let param = defaultParams[paramName];\n          if (typeof param === 'function') {\n            this.derivedParams[paramName] = param;\n          } else if (typeof param === 'string' && param.startsWith('@')) {\n            this.derivedParams[paramName] = param.slice(1);\n          } else {\n            //add to default if it's not an @ or function param\n            this.defaultParams[paramName] = defaultParams[paramName];\n          }\n        });\n\n      if (this.config.cache === true) {\n        this.config.cache = cacheManager.caching(cacheDefault);\n      }\n    }\n    getCacheKey(params, data) {\n      return this.route.reverse(params) + JSON.stringify(data || {});\n    }\n    buildRequest(params, data) {\n      let method = this.config.method.toLowerCase();\n      let currentRequest = superagent[method === 'delete' ? 'del' : method](this.route.reverse(params));\n\n      currentRequest = currentRequest.accept(this.config.responseType);\n      if (this.config.headers) {\n        currentRequest = currentRequest.set(this.config.headers);\n      }\n\n      if (this.config.timeout) {\n        currentRequest.timeout(this.config.timeout);\n      } else {\n        currentRequest.clearTimeout();\n      }\n\n      if (this.config.withCredentials) {\n        currentRequest = currentRequest.withCredentials();\n      }\n\n      if (data) {\n        let transformedData = applyRequestTransforms(this.config.transformRequest, currentRequest, data);\n        if (method === 'get') {\n          currentRequest = currentRequest.query(transformedData);\n        } else {\n          currentRequest = currentRequest.send(transformedData);\n        }\n      }\n\n      return currentRequest;\n    }\n    makeRequest(params, data) {\n      let deferred = Q.defer();\n\n      if(arguments.length === 1 && this.canHaveData) {\n        data = params;\n        params = undefined;\n      }\n\n      let computedParams = {};\n      Object.getOwnPropertyNames(this.derivedParams)\n        .forEach((prop) => {\n            let param = this.derivedParams[prop];\n            if(typeof param === 'function') {\n              computedParams[prop] = param();\n            } else {\n              computedParams[prop] = data[param];\n            }\n        });\n\n      let fullParams = ResourceAction_js__assign({}, this.defaultParams, computedParams, params);\n\n      let doRequest = () => {\n        this.buildRequest(fullParams, data)\n            .end((err, res) => {\n              if (err) {\n                deferred.reject(err);\n              } else {\n                let transformedReponse = applyResponseTransforms(this.config.transformResponse, res);\n\n                if (this.config.cache) {\n                  this.config.cache.set(this.getCacheKey(fullParams, data), transformedReponse);\n                }\n\n                deferred.resolve(transformedReponse);\n              }\n            });\n      };\n\n      if (this.config.cache && this.config.method.toUpperCase() === 'GET') {\n        let key = this.getCacheKey(fullParams, data);\n        this.config.cache.get(key, (err, result) => {\n          if (err) {\n            deferred.reject(err);\n          } else if (result) {\n            deferred.resolve(result);\n          } else {\n            doRequest();\n          }\n        })\n      } else {\n        doRequest();\n      }\n\n      return deferred.promise;\n    }\n  }\n\n  var super_res__assign = super_res__assign || require('object.assign');\n\n  let super_res__superRes = {};\n\n  function generateDefaultActions(url, defaultParams) {\n    let resource = {};\n\n    let action = new ResourceAction(url, defaultParams, super_res__assign({}, actionDefaults));\n    resource.get = action.makeRequest.bind(action);\n    resource.query = resource.get;\n\n    action = new ResourceAction(url, defaultParams, super_res__assign({}, actionDefaults, {method: 'POST'}));\n    resource.save = action.makeRequest.bind(action);\n\n    action = new ResourceAction(url, defaultParams, super_res__assign({}, actionDefaults, {method: 'PUT'}));\n    resource.put = action.makeRequest.bind(action);\n\n    action = new ResourceAction(url, defaultParams, super_res__assign({}, actionDefaults, {method: 'DELETE'}));\n    resource.remove = action.makeRequest.bind(action);\n    resource['delete'] = resource.remove;\n\n    return resource;\n  }\n\n  super_res__superRes.resource = (url, defaultParams, actions) => {\n    let resource = generateDefaultActions(url, defaultParams);\n    if (actions) {\n      Object.getOwnPropertyNames(actions).forEach((name) => {\n        let action = new ResourceAction(url, defaultParams, actions[name]);\n        resource[name] = function (...args) {\n          action.makeRequest(...args);\n        }\n      });\n    }\n    return resource;\n  };\n\n  super_res__superRes.promiseWrapper = function promiseWrapper(wrapperFunc) {\n    return (resource) => {\n      let proxiedResource = super_res__assign({}, resource);\n      Object.getOwnPropertyNames(resource).forEach((name) => {\n        let actionFunction = proxiedResource[name];\n        proxiedResource[name] = function (...args) {\n          let promise = actionFunction.apply(proxiedResource, args);\n          return wrapperFunc(promise);\n        }\n      });\n      return proxiedResource;\n    }\n  };\n\n  var super_res = super_res__superRes;\n\n  return super_res;\n\n}));\n","var assign = assign || require('object.assign');\n\nimport Q from 'q';\nimport request from 'superagent';\nimport Route from 'route-parser';\nimport cacheManager from 'cache-manager';\n\nimport actionDefaults from './actionDefaults.js';\n\nconst cacheDefault = {store: 'memory', max: 100, ttl: 1200};\n\nfunction applyResponseTransforms(transforms, response) {\n  return transforms.reduce(function (memo, transform) {\n    return transform(memo, response.header);\n  }, response.body);\n}\n\nfunction applyRequestTransforms(transforms, request, data) {\n  return transforms.reduce(function (memo, transform) {\n    return transform(memo, request.header);\n  }, data);\n}\n\nexport default class ResourceAction {\n  constructor(url, defaultParams, action) {\n    this.config = assign({url: url}, actionDefaults, action);\n\n    if((this.config.method.toUpperCase() === 'POST' ||\n      this.config.method.toUpperCase() === 'PUT' ||\n      this.config.method.toUpperCase() === 'PATCH')) {\n      this.canHaveData = true;\n    }\n\n    this.route = new Route(this.config.url);\n    this.defaultParams = {};\n    this.derivedParams = {};\n\n    Object.getOwnPropertyNames(defaultParams)\n      .forEach((paramName) => {\n        let param = defaultParams[paramName];\n        if (typeof param === 'function') {\n          this.derivedParams[paramName] = param;\n        } else if (typeof param === 'string' && param.startsWith('@')) {\n          this.derivedParams[paramName] = param.slice(1);\n        } else {\n          //add to default if it's not an @ or function param\n          this.defaultParams[paramName] = defaultParams[paramName];\n        }\n      });\n\n    if (this.config.cache === true) {\n      this.config.cache = cacheManager.caching(cacheDefault);\n    }\n  }\n  getCacheKey(params, data) {\n    return this.route.reverse(params) + JSON.stringify(data || {});\n  }\n  buildRequest(params, data) {\n    let method = this.config.method.toLowerCase();\n    let currentRequest = request[method === 'delete' ? 'del' : method](this.route.reverse(params));\n\n    currentRequest = currentRequest.accept(this.config.responseType);\n    if (this.config.headers) {\n      currentRequest = currentRequest.set(this.config.headers);\n    }\n\n    if (this.config.timeout) {\n      currentRequest.timeout(this.config.timeout);\n    } else {\n      currentRequest.clearTimeout();\n    }\n\n    if (this.config.withCredentials) {\n      currentRequest = currentRequest.withCredentials();\n    }\n\n    if (data) {\n      let transformedData = applyRequestTransforms(this.config.transformRequest, currentRequest, data);\n      if (method === 'get') {\n        currentRequest = currentRequest.query(transformedData);\n      } else {\n        currentRequest = currentRequest.send(transformedData);\n      }\n    }\n\n    return currentRequest;\n  }\n  makeRequest(params, data) {\n    let deferred = Q.defer();\n\n    if(arguments.length === 1 && this.canHaveData) {\n      data = params;\n      params = undefined;\n    }\n\n    let computedParams = {};\n    Object.getOwnPropertyNames(this.derivedParams)\n      .forEach((prop) => {\n          let param = this.derivedParams[prop];\n          if(typeof param === 'function') {\n            computedParams[prop] = param();\n          } else {\n            computedParams[prop] = data[param];\n          }\n      });\n\n    let fullParams = assign({}, this.defaultParams, computedParams, params);\n\n    let doRequest = () => {\n      this.buildRequest(fullParams, data)\n          .end((err, res) => {\n            if (err) {\n              deferred.reject(err);\n            } else {\n              let transformedReponse = applyResponseTransforms(this.config.transformResponse, res);\n\n              if (this.config.cache) {\n                this.config.cache.set(this.getCacheKey(fullParams, data), transformedReponse);\n              }\n\n              deferred.resolve(transformedReponse);\n            }\n          });\n    };\n\n    if (this.config.cache && this.config.method.toUpperCase() === 'GET') {\n      let key = this.getCacheKey(fullParams, data);\n      this.config.cache.get(key, (err, result) => {\n        if (err) {\n          deferred.reject(err);\n        } else if (result) {\n          deferred.resolve(result);\n        } else {\n          doRequest();\n        }\n      })\n    } else {\n      doRequest();\n    }\n\n    return deferred.promise;\n  }\n}","var assign = assign || require('object.assign');\n\nimport Q from 'q';\n\nimport ResourceAction from './ResourceAction.js';\nimport actionDefaults from './actionDefaults.js';\n\nlet superRes = {};\n\nfunction generateDefaultActions(url, defaultParams) {\n  let resource = {};\n\n  let action = new ResourceAction(url, defaultParams, assign({}, actionDefaults));\n  resource.get = action.makeRequest.bind(action);\n  resource.query = resource.get;\n\n  action = new ResourceAction(url, defaultParams, assign({}, actionDefaults, {method: 'POST'}));\n  resource.save = action.makeRequest.bind(action);\n\n  action = new ResourceAction(url, defaultParams, assign({}, actionDefaults, {method: 'PUT'}));\n  resource.put = action.makeRequest.bind(action);\n\n  action = new ResourceAction(url, defaultParams, assign({}, actionDefaults, {method: 'DELETE'}));\n  resource.remove = action.makeRequest.bind(action);\n  resource['delete'] = resource.remove;\n\n  return resource;\n}\n\nsuperRes.resource = (url, defaultParams, actions) => {\n  let resource = generateDefaultActions(url, defaultParams);\n  if (actions) {\n    Object.getOwnPropertyNames(actions).forEach((name) => {\n      let action = new ResourceAction(url, defaultParams, actions[name]);\n      resource[name] = function (...args) {\n        action.makeRequest(...args);\n      }\n    });\n  }\n  return resource;\n};\n\nsuperRes.promiseWrapper = function promiseWrapper(wrapperFunc) {\n  return (resource) => {\n    let proxiedResource = assign({}, resource);\n    Object.getOwnPropertyNames(resource).forEach((name) => {\n      let actionFunction = proxiedResource[name];\n      proxiedResource[name] = function (...args) {\n        let promise = actionFunction.apply(proxiedResource, args);\n        return wrapperFunc(promise);\n      }\n    });\n    return proxiedResource;\n  }\n};\n\nexport default superRes;\n","export default actionDefaults = {\n  method: 'GET',\n  responseType: 'json',\n  transformRequest: [],\n  transformResponse: [],\n  withCredentials: false,\n  cache: null\n};"],"sourceRoot":"/source/"}