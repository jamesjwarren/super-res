{"version":3,"sources":["super-res.min.js","/source/super-res.js","/source/src/ResourceAction.js","/source/src/super-res.js","/source/src/actionDefaults.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","require","define","amd","superRes","Q","superagent","Route","cacheManager","this","applyResponseTransforms","transforms","response","reduceRight","memo","transform","header","body","applyRequestTransforms","request","data","generateDefaultActions","url","defaultParams","resource","action","ResourceAction","super_res__assign","actionDefaults","get","makeRequest","bind","query","method","save","put","remove","responseType","transformRequest","transformResponse","withCredentials","cache","ResourceAction_js__assign","config","route","caching","store","max","ttl","value","params","reverse","JSON","stringify","toLowerCase","currentRequest","accept","headers","set","timeout","clearTimeout","transformedData","send","_this","deferred","defer","fullParams","doRequest","buildRequest","end","err","res","reject","transformedReponse","getCacheKey","resolve","result","promise","super_res__superRes","actions","getOwnPropertyNames","forEach","name","promiseWrapper","wrapperFunc","proxiedResource","actionFunction","_len","arguments","args","Array","_key","apply","super_res"],"mappings":"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","file":"super-res.min.js","sourcesContent":[null,"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('q'), require('superagent'), require('route-parser'), require('cache-manager')) :\n  typeof define === 'function' && define.amd ? define(['q', 'superagent', 'route-parser', 'cache-manager'], factory) :\n  global.superRes = factory(global.Q, global.superagent, global.Route, global.cacheManager)\n}(this, function (Q, superagent, Route, cacheManager) { 'use strict';\n\n  var actionDefaults = actionDefaults = {\n    method: 'GET',\n    responseType: 'json',\n    transformRequest: [],\n    transformResponse: [],\n    withCredentials: false,\n    cache: null\n  };\n\n  var ResourceAction_js__assign = ResourceAction_js__assign || require('object.assign');\n\n  function applyResponseTransforms(transforms, response) {\n    return transforms.reduceRight(function (memo, transform) {\n      return transform(memo, response.header);\n    }, response.body);\n  }\n\n  function applyRequestTransforms(transforms, request, data) {\n    return transforms.reduceRight(function (memo, transform) {\n      return transform(memo, request.header);\n    }, data);\n  }\n\n  class ResourceAction {\n    constructor(url, defaultParams, action) {\n      this.config = ResourceAction_js__assign({url: url}, actionDefaults, action);\n      this.route = new Route(this.config.url);\n      this.defaultParams = defaultParams;\n\n      if (this.config.cache === true) {\n        this.config.cache = cacheManager.caching({store: 'memory', max: 100, ttl: 1200});\n      }\n    }\n    getCacheKey(params, data) {\n      return this.route.reverse(params) + JSON.stringify(data);\n    }\n    buildRequest(params, data) {\n      let method = this.config.method.toLowerCase();\n      let currentRequest = superagent[method === 'delete' ? 'del' : method](this.route.reverse(params));\n\n      currentRequest = currentRequest.accept(this.config.responseType);\n      if (this.config.headers) {\n        currentRequest = currentRequest.set(this.config.headers);\n      }\n\n      if (this.config.timeout) {\n        currentRequest.timeout(this.config.timeout);\n      } else {\n        currentRequest.clearTimeout();\n      }\n\n      if (this.config.withCredentials) {\n        currentRequest = currentRequest.withCredentials();\n      }\n\n      if (data) {\n        let transformedData = applyRequestTransforms(this.config.transformRequest, currentRequest, data);\n        if (method === 'get') {\n          currentRequest = currentRequest.query(transformedData);\n        } else {\n          currentRequest = currentRequest.send(transformedData);\n        }\n      }\n\n      return currentRequest;\n    }\n    makeRequest(params, data) {\n      let deferred = Q.defer();\n      let fullParams = ResourceAction_js__assign({}, this.defaultParams, params);\n\n      let doRequest = () => {\n        this.buildRequest(fullParams, data)\n            .end((err, res) => {\n              if (err) {\n                deferred.reject(err);\n              } else {\n                let transformedReponse = applyResponseTransforms(this.config.transformResponse, res);\n\n                if (this.config.cache) {\n                  this.config.cache.set(this.getCacheKey(fullParams, data), transformedReponse);\n                }\n\n                deferred.resolve(transformedReponse);\n              }\n            });\n      };\n\n      if (this.config.cache && this.config.method.toLowerCase() === 'get') {\n        let key = this.getCacheKey(fullParams, data);\n        this.config.cache.get(key, (err, result) => {\n          if (err) {\n            deferred.reject(err);\n          } else if (result) {\n            deferred.resolve(result);\n          } else {\n            doRequest();\n          }\n        })\n      } else {\n        doRequest();\n      }\n\n      return deferred.promise;\n    }\n  }\n\n  var super_res__assign = super_res__assign || require('object.assign');\n\n  let super_res__superRes = {};\n\n  function generateDefaultActions(url, defaultParams) {\n    let resource = {};\n\n    let action = new ResourceAction(url, defaultParams, super_res__assign({}, actionDefaults));\n    resource.get = action.makeRequest.bind(action);\n    resource.query = resource.get;\n\n    action = new ResourceAction(url, defaultParams, super_res__assign({}, actionDefaults, {method: 'POST'}));\n    resource.save = action.makeRequest.bind(action);\n\n    action = new ResourceAction(url, defaultParams, super_res__assign({}, actionDefaults, {method: 'PUT'}));\n    resource.put = action.makeRequest.bind(action);\n\n    action = new ResourceAction(url, defaultParams, super_res__assign({}, actionDefaults, {method: 'DELETE'}));\n    resource.remove = action.makeRequest.bind(action);\n    resource['delete'] = resource.remove;\n\n    return resource;\n  }\n\n  super_res__superRes.resource = (url, defaultParams, actions) => {\n    let resource = generateDefaultActions(url, defaultParams);\n    if (actions) {\n      Object.getOwnPropertyNames(actions).forEach((name) => {\n        resource[name] = (new ResourceAction(url, defaultParams, actions[name])).makeRequest;\n      });\n    }\n    return resource;\n  };\n\n  super_res__superRes.promiseWrapper = function promiseWrapper(wrapperFunc) {\n    return (resource) => {\n      let proxiedResource = super_res__assign({}, resource);\n      Object.getOwnPropertyNames(resource).forEach((name) => {\n        let actionFunction = proxiedResource[name];\n        proxiedResource[name] = function (...args) {\n          let promise = actionFunction.apply(proxiedResource, args);\n          return wrapperFunc(promise);\n        }\n      });\n      return proxiedResource;\n    }\n  };\n\n  var super_res = super_res__superRes;\n\n  return super_res;\n\n}));\n","var assign = assign || require('object.assign');\n\nimport Q from 'q';\nimport request from 'superagent';\nimport Route from 'route-parser';\nimport cacheManager from 'cache-manager';\n\nimport actionDefaults from './actionDefaults.js';\n\nfunction applyResponseTransforms(transforms, response) {\n  return transforms.reduceRight(function (memo, transform) {\n    return transform(memo, response.header);\n  }, response.body);\n}\n\nfunction applyRequestTransforms(transforms, request, data) {\n  return transforms.reduceRight(function (memo, transform) {\n    return transform(memo, request.header);\n  }, data);\n}\n\nexport default class ResourceAction {\n  constructor(url, defaultParams, action) {\n    this.config = assign({url: url}, actionDefaults, action);\n    this.route = new Route(this.config.url);\n    this.defaultParams = defaultParams;\n\n    if (this.config.cache === true) {\n      this.config.cache = cacheManager.caching({store: 'memory', max: 100, ttl: 1200});\n    }\n  }\n  getCacheKey(params, data) {\n    return this.route.reverse(params) + JSON.stringify(data);\n  }\n  buildRequest(params, data) {\n    let method = this.config.method.toLowerCase();\n    let currentRequest = request[method === 'delete' ? 'del' : method](this.route.reverse(params));\n\n    currentRequest = currentRequest.accept(this.config.responseType);\n    if (this.config.headers) {\n      currentRequest = currentRequest.set(this.config.headers);\n    }\n\n    if (this.config.timeout) {\n      currentRequest.timeout(this.config.timeout);\n    } else {\n      currentRequest.clearTimeout();\n    }\n\n    if (this.config.withCredentials) {\n      currentRequest = currentRequest.withCredentials();\n    }\n\n    if (data) {\n      let transformedData = applyRequestTransforms(this.config.transformRequest, currentRequest, data);\n      if (method === 'get') {\n        currentRequest = currentRequest.query(transformedData);\n      } else {\n        currentRequest = currentRequest.send(transformedData);\n      }\n    }\n\n    return currentRequest;\n  }\n  makeRequest(params, data) {\n    let deferred = Q.defer();\n    let fullParams = assign({}, this.defaultParams, params);\n\n    let doRequest = () => {\n      this.buildRequest(fullParams, data)\n          .end((err, res) => {\n            if (err) {\n              deferred.reject(err);\n            } else {\n              let transformedReponse = applyResponseTransforms(this.config.transformResponse, res);\n\n              if (this.config.cache) {\n                this.config.cache.set(this.getCacheKey(fullParams, data), transformedReponse);\n              }\n\n              deferred.resolve(transformedReponse);\n            }\n          });\n    };\n\n    if (this.config.cache && this.config.method.toLowerCase() === 'get') {\n      let key = this.getCacheKey(fullParams, data);\n      this.config.cache.get(key, (err, result) => {\n        if (err) {\n          deferred.reject(err);\n        } else if (result) {\n          deferred.resolve(result);\n        } else {\n          doRequest();\n        }\n      })\n    } else {\n      doRequest();\n    }\n\n    return deferred.promise;\n  }\n}","var assign = assign || require('object.assign');\n\nimport Q from 'q';\n\nimport ResourceAction from './ResourceAction.js';\nimport actionDefaults from './actionDefaults.js';\n\nlet superRes = {};\n\nfunction generateDefaultActions(url, defaultParams) {\n  let resource = {};\n\n  let action = new ResourceAction(url, defaultParams, assign({}, actionDefaults));\n  resource.get = action.makeRequest.bind(action);\n  resource.query = resource.get;\n\n  action = new ResourceAction(url, defaultParams, assign({}, actionDefaults, {method: 'POST'}));\n  resource.save = action.makeRequest.bind(action);\n\n  action = new ResourceAction(url, defaultParams, assign({}, actionDefaults, {method: 'PUT'}));\n  resource.put = action.makeRequest.bind(action);\n\n  action = new ResourceAction(url, defaultParams, assign({}, actionDefaults, {method: 'DELETE'}));\n  resource.remove = action.makeRequest.bind(action);\n  resource['delete'] = resource.remove;\n\n  return resource;\n}\n\nsuperRes.resource = (url, defaultParams, actions) => {\n  let resource = generateDefaultActions(url, defaultParams);\n  if (actions) {\n    Object.getOwnPropertyNames(actions).forEach((name) => {\n      resource[name] = (new ResourceAction(url, defaultParams, actions[name])).makeRequest;\n    });\n  }\n  return resource;\n};\n\nsuperRes.promiseWrapper = function promiseWrapper(wrapperFunc) {\n  return (resource) => {\n    let proxiedResource = assign({}, resource);\n    Object.getOwnPropertyNames(resource).forEach((name) => {\n      let actionFunction = proxiedResource[name];\n      proxiedResource[name] = function (...args) {\n        let promise = actionFunction.apply(proxiedResource, args);\n        return wrapperFunc(promise);\n      }\n    });\n    return proxiedResource;\n  }\n};\n\nexport default superRes;\n","export default actionDefaults = {\n  method: 'GET',\n  responseType: 'json',\n  transformRequest: [],\n  transformResponse: [],\n  withCredentials: false,\n  cache: null\n};"],"sourceRoot":"/source/"}