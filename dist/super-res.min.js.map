{"version":3,"sources":["/source/super-res.js","/source/src/super-res.js","super-res.min.js"],"names":["global","factory","exports","module","require","define","amd","superRes","request","Route","Q","this","buildRequest","action","route","params","data","currentRequest","method","toLowerCase","reverse","accept","responseType","query","send","buildAction","url","fullAction","Object","assign","actionDefaults","deferred","defer","timeoutId","undefined","timeout","setTimeout","reject","reason","end","err","res","clearTimeout","resolve","body","promise","buildDefaultActions","resource","get","save","put","remove","super_res__superRes","defaultParams","actions","getOwnPropertyNames","forEach","name","proxyQ","qInstance","proxiedResource","actionFunction","_len","arguments","length","args","Array","_key","apply","when","super_res"],"mappings":"CAAC,SAAUA,EAAQC,GACE,gBAAZC,UAA0C,mBAAXC,QAAyBA,OAAOD,QAAUD,EAAQG,QAAQ,cAAeA,QAAQ,gBAAiBA,QAAQ,MAC9H,kBAAXC,SAAyBA,OAAOC,IAAMD,QAAQ,aAAc,eAAgB,KAAMJ,GACzFD,EAAOO,SAAWN,EAAQD,EAAOQ,QAASR,EAAOS,MAAOT,EAAOU,IAC/DC,KAAM,SAAUH,EAASC,EAAOC,GAAK,YCOvC,SAASE,GAAaC,EAAQC,EAAOC,EAAQC,GAC3C,GAAIC,GAAiBT,EAEjBU,EAASL,EAAOK,OAAOC,aAW3B,OAVAF,GAAiBT,EAAmB,WAAXU,EAAsB,MAAQA,GAAQJ,EAAMM,QAAQL,IAE7EE,EAAiBA,EAAeI,OAAOR,EAAOS,cAE1CN,GAAmB,QAAXE,EACVD,EAAiBA,EAAeM,MAAMP,GAC7BA,IACTC,EAAiBA,EAAeO,KAAKR,IAGhCC,EAGT,QAASQ,GAAYC,EAAKb,GACxB,GAAMc,GAAaC,OAAOC,QAAQH,IAAKA,GAAMI,EAAgBjB,GACvDC,EAAQ,GAAIL,GAAMkB,EAAWD,IACnC,OAAO,UAAUX,EAAQC,GACvB,GAAIe,GAAWrB,EAAEsB,QACbC,EAAAC,MAeJ,OAdIrB,GAAOsB,UACTF,EAAYG,WAAW,WACrBL,EAASM,QAAQC,OAAQ,qBACxBzB,EAAOsB,UAEZvB,EAAae,EAAYb,EAAOC,EAAQC,GACrCuB,IAAI,SAACC,EAAKC,GACTC,aAAaT,GACTO,EACFT,EAASM,OAAOG,GAEhBT,EAASY,QAAQF,EAAIG,QAGpBb,EAASc,SAIpB,QAASC,GAAoBpB,GAC3B,GAAIqB,KAOJ,OANAA,GAASC,IAAMvB,EAAYC,EAAKE,OAAOC,UAAWC,IAClDiB,EAASxB,MAAQwB,EAASC,IAC1BD,EAASE,KAAOxB,EAAYC,EAAKE,OAAOC,UAAWC,GAAiBZ,OAAQ,UAC5E6B,EAASG,IAAMzB,EAAYC,EAAKE,OAAOC,UAAWC,GAAiBZ,OAAQ,SAC3E6B,EAASI,OAAS1B,EAAYC,EAAKE,OAAOC,UAAWC,GAAiBZ,OAAQ,YAC9E6B,EAAS,UAAYA,EAASI,OACvBJ,EAxDT,GAJAK,MAMMtB,GACJZ,OAAQ,MACRI,aAAc,OARhB8B,GA+DSL,SAAW,SAACrB,EAAK2B,EAAeC,GACvC,GAAIP,GAAWD,EAAoBpB,EAMnC,OALI4B,IACF1B,OAAO2B,oBAAoBD,GAASE,QAAQ,SAACC,GAC3CV,EAASU,GAAQhC,EAAYC,EAAK4B,EAAQG,MAGvCV,GAtETK,EAyESM,OAAS,SAACC,GACjB,MAAO,UAACZ,GACN,GAAIa,GAAkBhC,OAAOC,UAAWkB,EAQxC,OAPAnB,QAAO2B,oBAAoBR,GAAUS,QAAQ,SAACC,GAC5C,GAAII,GAAiBD,EAAgBH,EACrCG,GAAgBH,GAAQ,WCCpB,IAAK,GAAIK,GAAOC,UAAUC,ODDOC,EAAAC,MAAAJ,GAAAK,EAAA,EAAAL,EAAAK,EAAAA,IAAAF,EAAAE,GAAAJ,UAAAI,EACnC,IAAItB,GAAUgB,EAAeO,MAAMR,EAAiBK,EACpD,OAAON,GAAUU,KAAKxB,MAGnBe,GAnFX,IAAAU,GAAAlB,CD2FE,OAAOkB","file":"super-res.min.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('superagent'), require('route-parser'), require('q')) :\n  typeof define === 'function' && define.amd ? define(['superagent', 'route-parser', 'q'], factory) :\n  global.superRes = factory(global.request, global.Route, global.Q)\n}(this, function (request, Route, Q) { 'use strict';\n\n  let super_res__superRes = {};\n\n  const actionDefaults = {\n    method: 'GET',\n    responseType: 'json'\n  };\n\n  function buildRequest(action, route, params, data) {\n    let currentRequest = request;\n\n    let method = action.method.toLowerCase();\n    currentRequest = request[method === 'delete' ? 'del' : method](route.reverse(params));\n\n    currentRequest = currentRequest.accept(action.responseType);\n\n    if (data && method === 'get') {\n      currentRequest = currentRequest.query(data);\n    } else if (data) {\n      currentRequest = currentRequest.send(data);\n    }\n\n    return currentRequest;\n  }\n\n  function buildAction(url, action) {\n    const fullAction = Object.assign({url: url}, actionDefaults, action);\n    const route = new Route(fullAction.url);\n    return function (params, data) {\n      let deferred = Q.defer();\n      let timeoutId;\n      if (action.timeout) {\n        timeoutId = setTimeout(() => {\n          deferred.reject({reason: 'Timeout reached'});\n        }, action.timeout);\n      }\n      buildRequest(fullAction, route, params, data)\n        .end((err, res) => {\n          clearTimeout(timeoutId);\n          if (err) {\n            deferred.reject(err);\n          } else {\n            deferred.resolve(res.body);\n          }\n        });\n      return deferred.promise;\n    };\n  }\n\n  function buildDefaultActions(url) {\n    let resource = {};\n    resource.get = buildAction(url, Object.assign({}, actionDefaults));\n    resource.query = resource.get;\n    resource.save = buildAction(url, Object.assign({}, actionDefaults, {method: 'POST'}));\n    resource.put = buildAction(url, Object.assign({}, actionDefaults, {method: 'PUT'}));\n    resource.remove = buildAction(url, Object.assign({}, actionDefaults, {method: 'DELETE'}));\n    resource['delete'] = resource.remove;\n    return resource;\n  }\n\n  super_res__superRes.resource = (url, defaultParams, actions) => {\n    let resource = buildDefaultActions(url);\n    if (actions) {\n      Object.getOwnPropertyNames(actions).forEach((name) => {\n        resource[name] = buildAction(url, actions[name]);\n      });\n    }\n    return resource;\n  };\n\n  super_res__superRes.proxyQ = (qInstance) => {\n    return (resource) => {\n      let proxiedResource = Object.assign({}, resource);\n      Object.getOwnPropertyNames(resource).forEach((name) => {\n        let actionFunction = proxiedResource[name];\n        proxiedResource[name] = function (...args) {\n          let promise = actionFunction.apply(proxiedResource, args);\n          return qInstance.when(promise);\n        }\n      });\n      return proxiedResource;\n    }\n  };\n\n  var super_res = super_res__superRes;\n\n  return super_res;\n\n}));\n","import request from 'superagent';\nimport Route from 'route-parser';\nimport Q from 'q';\n\nlet superRes = {};\n\nconst actionDefaults = {\n  method: 'GET',\n  responseType: 'json'\n};\n\nfunction buildRequest(action, route, params, data) {\n  let currentRequest = request;\n\n  let method = action.method.toLowerCase();\n  currentRequest = request[method === 'delete' ? 'del' : method](route.reverse(params));\n\n  currentRequest = currentRequest.accept(action.responseType);\n\n  if (data && method === 'get') {\n    currentRequest = currentRequest.query(data);\n  } else if (data) {\n    currentRequest = currentRequest.send(data);\n  }\n\n  return currentRequest;\n}\n\nfunction buildAction(url, action) {\n  const fullAction = Object.assign({url: url}, actionDefaults, action);\n  const route = new Route(fullAction.url);\n  return function (params, data) {\n    let deferred = Q.defer();\n    let timeoutId;\n    if (action.timeout) {\n      timeoutId = setTimeout(() => {\n        deferred.reject({reason: 'Timeout reached'});\n      }, action.timeout);\n    }\n    buildRequest(fullAction, route, params, data)\n      .end((err, res) => {\n        clearTimeout(timeoutId);\n        if (err) {\n          deferred.reject(err);\n        } else {\n          deferred.resolve(res.body);\n        }\n      });\n    return deferred.promise;\n  };\n}\n\nfunction buildDefaultActions(url) {\n  let resource = {};\n  resource.get = buildAction(url, Object.assign({}, actionDefaults));\n  resource.query = resource.get;\n  resource.save = buildAction(url, Object.assign({}, actionDefaults, {method: 'POST'}));\n  resource.put = buildAction(url, Object.assign({}, actionDefaults, {method: 'PUT'}));\n  resource.remove = buildAction(url, Object.assign({}, actionDefaults, {method: 'DELETE'}));\n  resource['delete'] = resource.remove;\n  return resource;\n}\n\nsuperRes.resource = (url, defaultParams, actions) => {\n  let resource = buildDefaultActions(url);\n  if (actions) {\n    Object.getOwnPropertyNames(actions).forEach((name) => {\n      resource[name] = buildAction(url, actions[name]);\n    });\n  }\n  return resource;\n};\n\nsuperRes.proxyQ = (qInstance) => {\n  return (resource) => {\n    let proxiedResource = Object.assign({}, resource);\n    Object.getOwnPropertyNames(resource).forEach((name) => {\n      let actionFunction = proxiedResource[name];\n      proxiedResource[name] = function (...args) {\n        let promise = actionFunction.apply(proxiedResource, args);\n        return qInstance.when(promise);\n      }\n    });\n    return proxiedResource;\n  }\n};\n\nexport default superRes;\n",null],"sourceRoot":"/source/"}